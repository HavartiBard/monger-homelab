---
- name: Bootstrap and Install Technitium DNS Server
  hosts: technitium_dns
  become: yes
  gather_facts: false
  vars:
    technitium_version: "latest"  # Use latest stable version
    technitium_data_dir: "/opt/technitium"
    technitium_port: 5380

  pre_tasks:
    - name: Remove conflicting Python packages
      apt:
        name: python3-six
        state: absent
      ignore_errors: yes
    
    - name: Install Python packages for Ansible 2.17+ compatibility
      apt:
        name:
          - python3
          - python3-pip
          - python3-apt
          - python3-setuptools
          - python3-packaging
        state: present
        update_cache: yes
    
    - name: Gather facts
      setup:

  tasks:
    # ========================================
    # Phase 0: Create Automation User
    # ========================================
    - name: Create automation user
      user:
        name: automation
        comment: "Automation Service Account"
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
    
    - name: Setup passwordless sudo for automation user
      copy:
        content: "automation ALL=(ALL) NOPASSWD:ALL\n"
        dest: "/etc/sudoers.d/automation"
        mode: '0440'
        validate: 'visudo -cf %s'
    
    - name: Create .ssh directory for automation user
      file:
        path: /home/automation/.ssh
        state: directory
        owner: automation
        group: automation
        mode: '0700'
    
    - name: Fetch automation SSH key from automation container
      slurp:
        src: /home/automation/.ssh/id_ed25519.pub
      register: automation_ssh_key
      delegate_to: automation
      run_once: yes
      ignore_errors: yes  # In case automation container doesn't exist yet
    
    - name: Add automation SSH key
      authorized_key:
        user: automation
        key: "{{ automation_ssh_key.content | b64decode }}"
        state: present
      when: automation_ssh_key is defined and automation_ssh_key.content is defined
    
    - name: Add automation container to known_hosts
      shell: |
        sudo -u automation ssh-keyscan -H 192.168.20.50 >> /home/automation/.ssh/known_hosts
        sudo chown automation:automation /home/automation/.ssh/known_hosts
      args:
        creates: /home/automation/.ssh/known_hosts
      when: automation_ssh_key is defined and automation_ssh_key.content is defined

    # ========================================
    # Phase 1: System Bootstrap
    # ========================================
    - name: Fix Ubuntu 24.10 repository sources (use HTTPS)
      replace:
        path: /etc/apt/sources.list.d/ubuntu.sources
        regexp: '^URIs: http:'
        replace: 'URIs: https:'
      ignore_errors: yes

    - name: Update and upgrade apt packages
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600

    - name: Install base packages
      apt:
        name:
          - curl
          - zsh
          - zsh-antigen
          - gnupg
          - vim
          - htop
          - net-tools
        state: present

    - name: Check if Oh My Zsh is installed
      stat:
        path: /home/{{ ansible_user }}/.oh-my-zsh
      register: ohmyzsh_check

    - name: Install Oh My Zsh
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      args:
        executable: /bin/bash
      become_user: "{{ ansible_user }}"
      when: ohmyzsh_check.stat.isdir is not defined or not ohmyzsh_check.stat.isdir

    - name: Check if custom .zshrc exists
      stat:
        path: "{{ playbook_dir }}/.zshrc"
      delegate_to: localhost
      register: zshrc_file_check
      become: no

    - name: Copy custom ZSH config file
      copy:
        src: .zshrc
        dest: /home/{{ ansible_user }}/.zshrc
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: zshrc_file_check.stat.exists

    - name: Remove carriage returns from .zshrc
      replace:
        path: /home/{{ ansible_user }}/.zshrc
        regexp: '\r'
        replace: ''
      when: zshrc_file_check.stat.exists

    - name: Check if firewalld is installed
      stat:
        path: /usr/sbin/firewalld
      register: firewalld_stat_check

    - name: Disable firewalld
      systemd:
        name: firewalld
        state: stopped
        enabled: no
      when: firewalld_stat_check.stat.exists

    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes

    - name: Disable swap in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    # ========================================
    # Phase 2: Disable systemd-resolved (conflicts with DNS on port 53)
    # ========================================
    - name: Stop systemd-resolved
      systemd:
        name: systemd-resolved
        state: stopped
        enabled: no

    - name: Remove resolv.conf symlink
      file:
        path: /etc/resolv.conf
        state: absent

    - name: Create new resolv.conf with upstream DNS
      copy:
        content: |
          nameserver 1.1.1.1
          nameserver 8.8.8.8
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: '0644'

    # ========================================
    # Phase 3: Docker Installation
    # ========================================
    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create Technitium data directory
      file:
        path: "{{ technitium_data_dir }}"
        state: directory
        mode: '0755'

    - name: Deploy Technitium DNS container
      docker_container:
        name: technitium
        image: "technitium/dns-server:{{ technitium_version }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "53:53/udp"
          - "53:53/tcp"
          - "{{ technitium_port }}:5380/tcp"  # Web interface
          - "67:67/udp"  # DHCP (optional)
        volumes:
          - "{{ technitium_data_dir }}:/etc/dns"
        env:
          DNS_SERVER_DOMAIN: "{{ inventory_hostname }}"
          DNS_SERVER_ADMIN_PASSWORD: "admin"  # Change this after first login!
        capabilities:
          - NET_ADMIN

    - name: Wait for Technitium to be ready
      wait_for:
        port: "{{ technitium_port }}"
        delay: 5
        timeout: 60

    - name: Display access information
      debug:
        msg:
          - "========================================"
          - "Technitium DNS Server installed successfully!"
          - "========================================"
          - "Host: {{ inventory_hostname }}"
          - "IP: {{ ansible_host }}"
          - "Web Interface: http://{{ ansible_host }}:{{ technitium_port }}"
          - "Default username: admin"
          - "Default password: admin (CHANGE THIS IMMEDIATELY!)"
          - "Version: {{ technitium_version }}"
          - "Data directory: {{ technitium_data_dir }}"
          - "========================================"
